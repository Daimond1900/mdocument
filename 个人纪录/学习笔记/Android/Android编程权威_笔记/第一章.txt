1. LinearLayout组件
	继承自View子类的ViewGroup组件。ViewGroup组件是个包含并配置其他组件的特殊组件
	其他ViewGroup子类还包括FrameLayout、TableLayout和RelativeLayout
	
2. 组件属性
	 android:layout_width和android:layout_height属性
	 
	 android:padding="24dp"  : padding 表示：该属性告诉组件在决定大小时，除内容本身外，还需增加额外指定量的空间
	 
	 android:orientation属性 ： 
	 
3. 布局中用到的text ，最好的做法，引用strings.xml

布局文件 转成 视图对象 ----> activity类

布局是一种资源。资源是应用非代码形式的内容，比如图像文件、音频文件以及XML文件等
项目的所有资源文件都存放在目录app/res的子目录下

4. MVC 的设计
	应用对象按模型、控制器和视图的类别分为三部分
	MVC设计模式表明，应用的任何对象，归根结底都属于模型对象、视图对象以及控制对象中的一种
	
	4.1 模型对象
				存储着应用的数据和业务逻辑。
				模型类通常用来映射与应用相关的一些事物如用户、商店里的商品、服务器上的图片或者一段电视节目；
				它存在的唯一目的就是存储和管理应用数据
	4.2	视图对象
				道如何在屏幕上绘制自己以及如何响应用户的输入，如用户的触摸等。一个
				简单的经验法则是，凡是能够在屏幕上看见的对象，就是视图对象。
	4.3	控制对象
				有应用的逻辑单元，是视图与模型对象的联系纽带
				控制对象响应视图对象触发的各类事件，此外还管理着模型对象与视图间的数据流动。
				在Android的世界里，控制器通常是Activity、Fragment或Service的一个子类
				
5. 返回前一个页面值（Intent）
	前一个页面：
			REQUEST_CODE_CHEAT = 0;
			
			跳转：
			 	startActivityForResult(下一个页面.gotoActivity(MainActivity.this, 跳转带过去的值, 跳转带过去的值), REQUEST_CODE_CHEAT);
			取值：
				@Override
				protected void onActivityResult(int requestCode, int resultCode, Intent data) {
					super.onActivityResult(requestCode, resultCode, data);
					if (resultCode != Activity.RESULT_OK) {
						return;
					}
					if (requestCode == REQUEST_CODE_CHEAT) {
						if (data == null) {
							return;
						}
					showAnswerResult = 下一个页面.getResult(data);
					}
				}
	跳转到de页面：
				设置要返回上一个页面的值，通过Intent
			 	private void wasCheckAnswer(boolean b) {
					Intent data = new Intent();
					data.putExtra(EXTRA_WAS_SHOW_ANSWER,b);
					setResult(RESULT_OK,data);
				}

			public static Intent gotoActivity(MainActivity mainActivity, boolean correctAnswer, String questionTxt) {
				Intent intent = new Intent(mainActivity, CheckAnswerActivity.class);
				intent.putExtra("answer", correctAnswer);
				intent.putExtra("question", questionTxt);
				return intent;
			}

			public static boolean getResult(Intent result){
				return result.getBooleanExtra(EXTRA_WAS_SHOW_ANSWER,false);
			}



模型数据存储管理方式

小技巧
mCurrentIndex = 0;
mCurrentIndex = (mCurrentIndex+1) % mQuestionBank.length;  一个数组、list 下表 1 ~ length ~ 1;

mCurrentIndex = mCurrentIndex == 0 ? mQuestionBank.length - 1 : mCurrentIndex - 1;	// 向前推

给组件添加图片
android:drawablePadding="4dp"
android:drawableLeft="@mipmap/arrow_left"

ImageButton



